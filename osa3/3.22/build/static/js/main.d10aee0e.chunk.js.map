{"version":3,"sources":["components/Filter.js","components/ContactForm.js","components/Contact.js","components/Contacts.js","services/contacts.js","components/Notification.js","App.js","index.js"],"names":["Filter","props","onChange","handleFiltering","ContactForm","onSubmit","addContact","value","newName","handleNameChange","newNumber","handleNumberChange","type","Contact","person","deleteContact","name","number","onClick","Contacts","contactsToShow","map","id","baseUrl","Notification","message","className","App","useState","persons","setPersons","setNewName","setNewNumber","filter","setFilter","setMessage","useEffect","axios","get","then","response","data","toLowerCase","includes","event","target","preventDefault","newObject","found","forEach","i","window","confirm","contactToBeModified","find","changedContact","put","returnedContact","setTimeout","catch","error","console","log","post","contactService","concat","delete","newPersons","push","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d10aee0e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    return(\r\n        <div>filter shown with <input onChange={props.handleFiltering}/></div>\r\n    );\r\n};\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst ContactForm = (props) => {\r\n    return(\r\n        <form onSubmit={props.addContact}>\r\n        <div> name: <input value={props.newName} onChange={props.handleNameChange}/> </div>\r\n        <div> number: <input value={props.newNumber} onChange={props.handleNumberChange} /> </div>\r\n        <div> <button type=\"submit\"> add </button> </div>\r\n      </form>\r\n    );\r\n};\r\n\r\nexport default ContactForm","import React from 'react'\r\n\r\nconst Contact = ({ person, deleteContact }) => {\r\n  return(\r\n    <li>\r\n      {person.name} {person.number}\r\n      <button onClick = {() => deleteContact(person)}> Delete </button>\r\n    </li>\r\n  )\r\n};\r\n\r\nexport default Contact","import React from 'react'\r\nimport Contact from './Contact';\r\n\r\nconst Contacts = (props) => {\r\n  return(\r\n    <ul>\r\n        {props.contactsToShow.map(person => \r\n          <Contact key={person.id} person={person} deleteContact={props.deleteContact}/>\r\n        )}\r\n    </ul>\r\n  )\r\n};\r\n\r\nexport default Contacts","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\nexport const getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n};\r\n\r\nexport const create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n};\r\n\r\nexport const deleteContact = id => {\r\n  axios.delete(`${baseUrl}/${id}`);\r\n};\r\n\r\nexport const updateContact = (newObject) => {\r\n  const request = axios.put(`${baseUrl}/${newObject.id}`, newObject);\r\n  return request.then(response => response.data);\r\n};","import React from 'react'\r\n\r\nexport const Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport ContactForm from './components/ContactForm'\nimport Contacts from './components/Contacts'\nimport * as contactService from './services/contacts'\nimport { Notification } from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ message, setMessage ] = useState(null);\n\n  useEffect(() => {\n    contactService\n      .getAll()\n        .then(persons => {\n        setPersons(persons)\n      })\n  }, [])\n\n  const addContact = (event) => {\n    event.preventDefault();\n    let found = false\n    persons.forEach((i) => {\n      if (i.name === newName) {\n        found = true \n      };\n    });\n    if (found) {\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {    // modify existing contact\n        const contactToBeModified = persons.find(i => i.name === newName);\n        const changedContact = { ...contactToBeModified, number: newNumber};\n\n        contactService\n          .updateContact(changedContact)\n          .then((returnedContact) => {\n            setPersons(persons.map(i => i.id !== returnedContact.id ? i : returnedContact));\n            setMessage(`Updated ${newName}`);\n            setTimeout(() => {\n              setMessage(null)\n            }, 5000)\n          })\n          .catch(error => {\n            console.log(error)\n            setMessage(`${contactToBeModified.name} has already been removed from server`)\n            setTimeout(() => {\n              setMessage(null)\n            }, 5000)\n            setPersons(persons.filter(i => i.id !== contactToBeModified.id));\n          })\n      };\n      setNewName('');\n      setNewNumber('');\n\n    } else {\n      const contactOjb = {\n        name: newName,\n        number: newNumber\n      };\n      contactService\n      .create(contactOjb)\n        .then(returnedContact => {\n          setPersons(persons.concat(returnedContact));\n          setMessage(`Added ${newName}`);\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n      })\n      .catch(error => {\n        console.log(error)\n        setMessage(\"Person validation failed: invalid name or number\")\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n      })\n      setNewName('');\n      setNewNumber('');\n    };\n  };\n\n  const deleteContact = ( person ) => {\n    if (window.confirm(`Delete ${person.name}?`)) {\n      contactService.deleteContact(person.id);\n      const newPersons = []\n      persons.forEach(i => {\n        if(i.id !== person.id) {\n          newPersons.push(i)\n        };\n      });\n      setPersons(newPersons);\n      setMessage(`Deleted ${person.name}`);\n      setTimeout(() => {\n        setMessage(null)\n      }, 5000)\n    };\n  };\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleFiltering = (event) => {\n    setFilter(event.target.value);\n  };\n\n  const contactsToShow = filter \n    ? persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n    : persons\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Filter handleFiltering={handleFiltering} />\n\n      <h2>add a new</h2>\n      \n      <ContactForm \n        addContact={addContact} \n        newName={newName} \n        handleNameChange={handleNameChange}\n        newNumber={newNumber} \n        handleNumberChange={handleNumberChange}\n      />\n\n      <h2>Numbers</h2>\n\n      <Contacts contactsToShow={contactsToShow} deleteContact={deleteContact} />\n\n    </div>\n  )\n\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}